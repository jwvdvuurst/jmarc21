package org.example;

// Generated by CodiumAI

import org.example.Marc21Dictionary;

import org.junit.Test;

import java.util.List;

import static org.junit.Assert.*;

public class Marc21DictionaryTest {


    // getInstance method returns the same instance when called multiple times
    @Test
    public void test_getInstance_returnsSameInstance() {
        Marc21Dictionary instance1 = Marc21Dictionary.getInstance();
        Marc21Dictionary instance2 = Marc21Dictionary.getInstance();

        assertSame(instance1, instance2);
    }

    // getRecord method returns the correct record when given a valid tag
    @Test
    public void test_getRecord_returnsCorrectRecord() {
        Marc21Dictionary dictionary = Marc21Dictionary.getInstance();

        BaseRecord record = dictionary.getRecord("001");

        assertNotNull(record);
        assertEquals("001", record.getTag());
        assertEquals("Control Number", record.getDescription());
        assertEquals("", record.getValue());
    }

    // isControlRecord method returns true when given a valid control record tag
    @Test
    public void test_isControlRecord_returnsTrueForValidControlRecordTag() {
        Marc21Dictionary dictionary = Marc21Dictionary.getInstance();

        boolean result = dictionary.isControlRecord("001");

        assertTrue(result);
    }

    // isDataRecord method returns true when given a valid data record tag
    @Test
    public void test_isDataRecord_returnsTrueForValidDataRecordTag() {
        Marc21Dictionary dictionary = Marc21Dictionary.getInstance();

        boolean result = dictionary.isDataRecord("010");

        assertTrue(result);
    }

    // getDataRecord method returns the correct data record when given a valid tag
    @Test
    public void test_getDataRecord_returnsCorrectDataRecord() {
        Marc21Dictionary dictionary = Marc21Dictionary.getInstance();

        DataRecord record = dictionary.getDataRecord("010");

        assertNotNull(record);
        assertEquals("010", record.getTag());
        assertEquals("Library of Congress Number", record.getDescription());
        assertEquals("", record.getValue());
        assertEquals(' ', record.getIndicator1().charValue());
        assertEquals(' ', record.getIndicator2().charValue());
        List<SubField> subfields = record.getSubfields();
        assertEquals(4, subfields.size());
        assertEquals("a", subfields.get(0).getSubtag());
        assertFalse(subfields.get(0).isRepeatable());
        assertEquals("LC control number", subfields.get(0).getDescription());
        assertEquals("", subfields.get(0).getValue());
        assertEquals("b", subfields.get(1).getSubtag());
        assertTrue(subfields.get(1).isRepeatable());
        assertEquals("NUCMC control number", subfields.get(1).getDescription());
        assertEquals("", subfields.get(1).getValue());
        assertEquals("z", subfields.get(2).getSubtag());
        assertTrue(subfields.get(2).isRepeatable());
        assertEquals("Cancelled/Invalid LC control number", subfields.get(2).getDescription());
        assertEquals("", subfields.get(2).getValue());
        assertEquals("8", subfields.get(3).getSubtag());
        assertTrue(subfields.get(3).isRepeatable());
        assertEquals("Field Link and Sequence number", subfields.get(3).getDescription());
        assertEquals("", subfields.get(3).getValue());
    }

    // getRecord method returns null when given an invalid tag
    @Test
    public void test_getRecord_returnsNullForInvalidTag() {
        Marc21Dictionary dictionary = Marc21Dictionary.getInstance();

        BaseRecord record = dictionary.getRecord("999");

        assertNull(record);
    }

    // isControlRecord method returns false when given an invalid tag
    @Test
    public void test_isControlRecord_returnsFalseForInvalidTag() {
        Marc21Dictionary dictionary = Marc21Dictionary.getInstance();

        boolean result = dictionary.isControlRecord("999");

        assertFalse(result);
    }

    // isDataRecord method returns false when given an invalid tag
    @Test
    public void test_isDataRecord_returnsFalseForInvalidTag() {
        Marc21Dictionary dictionary = Marc21Dictionary.getInstance();

        boolean result = dictionary.isDataRecord("999");

        assertFalse(result);
    }

    // getDataRecord method returns null when given an invalid tag
    @Test
    public void test_getDataRecord_returnsNullForInvalidTag() {
        Marc21Dictionary dictionary = Marc21Dictionary.getInstance();

        DataRecord record = dictionary.getDataRecord("999");

        assertNull(record);
    }

    // getControlRecord method returns null when given an invalid tag
    @Test
    public void test_getControlRecord_returnsNullForInvalidTag() {
        Marc21Dictionary dictionary = Marc21Dictionary.getInstance();

        ControlRecord record = dictionary.getControlRecord("999");

        assertNull(record);
    }

    // getControlRecord method returns the correct control record when given a valid tag
    @Test
    public void test_getControlRecord_returnsCorrectControlRecord() {
        Marc21Dictionary dictionary = Marc21Dictionary.getInstance();
        ControlRecord expectedRecord = new ControlRecord("001", "Control Number", null);

        ControlRecord actualRecord = dictionary.getControlRecord("001");

        assertEquals(expectedRecord, actualRecord);
    }

    // Marc21Dictionary is initialized with the correct control and data records
    @Test
    public void test_dictionaryIsInitializedWithCorrectRecords() {
        Marc21Dictionary dictionary = Marc21Dictionary.getInstance();

        assertTrue(dictionary.isControlRecord("001"));
        assertTrue(dictionary.isControlRecord("003"));
        assertTrue(dictionary.isControlRecord("005"));
        assertTrue(dictionary.isControlRecord("006"));
        assertTrue(dictionary.isControlRecord("007"));
        assertTrue(dictionary.isControlRecord("008"));

        assertTrue(dictionary.isDataRecord("010"));

        assertNotNull(dictionary.getRecord("001"));
        assertNotNull(dictionary.getRecord("003"));
        assertNotNull(dictionary.getRecord("005"));
        assertNotNull(dictionary.getRecord("006"));
        assertNotNull(dictionary.getRecord("007"));
        assertNotNull(dictionary.getRecord("008"));
        assertNotNull(dictionary.getRecord("010"));

        assertTrue(dictionary.getRecord("001") instanceof ControlRecord);
        assertTrue(dictionary.getRecord("003") instanceof ControlRecord);
        assertTrue(dictionary.getRecord("005") instanceof ControlRecord);
        assertTrue(dictionary.getRecord("006") instanceof ControlRecord);
        assertTrue(dictionary.getRecord("007") instanceof ControlRecord);
        assertTrue(dictionary.getRecord("008") instanceof ControlRecord);
        assertTrue(dictionary.getRecord("010") instanceof DataRecord);
    }

    // Marc21Dictionary is a singleton class
    @Test
    public void test_dictionaryIsSingleton() {
        Marc21Dictionary instance1 = Marc21Dictionary.getInstance();
        Marc21Dictionary instance2 = Marc21Dictionary.getInstance();

        assertSame(instance1, instance2);
    }

}